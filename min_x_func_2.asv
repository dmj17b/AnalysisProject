function min_val = min_x_func_2(x,y,handle, bounds, func)

zeros_func = @(x_new) handle(x_new,x,y);
tmp_bounds = bounds;
min_v = [];

if(x < bounds(2))
    while(1)
        try
            new_item = fzero(zeros_func,tmp_bounds);
        catch
            try
                sign_first = sign(zeros_func(tmp_bounds(1)));
                search_space = tmp_bounds(1):0.01:tmp_bounds(2);
                zero_search = zeros_func(search_space);
                idx = find(sign_first*-1*zero_search > 0, 1, 'last');
                tmp_bounds(2) = search_space(idx);
                new_item = fzero(zeros_func,tmp_bounds);
            catch
                [~,idx] = min(abs(zero_search));
                new_item = search_space(idx);
                min_v = [min_v new_item];
                break
            end
        end
        if(isempty(new_item))
            break
        end
        min_v = [min_v new_item];
        tmp_bounds(1) = new_item+0.01;
    end
else
    while(1)
        try
            new_item = fzero(zeros_func,tmp_bounds);
        catch
            try
                search_space = tmp_bounds(1):0.01:tmp_bounds(2);
                zero_search = zeros_func(search_space);
                [mins,idx] = find(abs(diff(zero_search)) < 0.1,length(search_space));
            
                new_item = search_space(idx);
                min_v = [min_v new_item];
                break
            catch
                break
            end
        end
        if(isempty(new_item))
            break
        end
        min_v = [min_v new_item];
        tmp_bounds(1) = new_item+0.01;
    end
end

if isempty(min_v)
    min_val = bounds(2);
    fprintf("X: %0.2f\n", x)
else
    [~, idx] = min(sqrt((min_v - x).^2 + (func(min_v) - y).^2));
    min_val = min_v(idx);
end


%{
zeros_func = @(x_new) handle(x_new,x,y);

tmp_bounds = bounds;
tmp_bounds(2) = tmp_bounds(2) + 0.1;
min_v = [];
while(1)
    try
        new_item = fzero(zeros_func,tmp_bounds);
    catch
        try
            search_space = tmp_bounds(1):0.01:tmp_bounds(2);
            zero_search = zeros_func(search_space);
            [~,idx] = find(abs(diff(zero_search)) < 0.01,length(search_space));
            new_item = search_space(idx);
            min_v = [min_v new_item];
            break
        catch
            break
        end
    end
    if(isempty(new_item))
        break
    end
    min_v = [min_v new_item];
    tmp_bounds(1) = new_item+0.01;
end
%}
